# -*- coding: utf-8 -*-
"""2D Matrix problems.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/164FXXu4KWro4T05QFH1NbqYkY_R5XI_V
"""

#Rotate a matrix by 90 -Anticlockwise


M = [ [1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]
N = 4

circles =0
#start point 0,0
i,j=0,0

while(circles < N/2) :

  cycles = N-1-2*circles
  jumps = 0

  while(jumps<cycles):
    temp = M[i][j+jumps]
    M[i][j+jumps] = M[i+jumps][j+cycles]
    M[i+jumps][j+cycles] = M[i+cycles][j+cycles-jumps]
    M[i+cycles][j+cycles-jumps] = M[i+cycles-jumps][j]
    M[i+cycles-jumps][j] = temp
    print(M)
    jumps +=1
  i += 1
  j +=1
  circles +=1

print(M)

#Rotate a matrix by 90 - Clockwise


M = [ [1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]
N = 4

circles =0
#start point 0,0
i,j=0,0

while(circles < N/2) :

  cycles = N-1-2*circles
  jumps = 0

  while(jumps<cycles):
    temp = M[i][j+jumps]
    M[i][j+jumps] = M[i+cycles-jumps][j] #Bottom left to top left
    M[i+cycles-jumps][j] = M[i+cycles][j+cycles-jumps]
    M[i+cycles][j+cycles-jumps] =M[i+jumps][j+cycles]
    M[i+jumps][j+cycles] = temp
    print(M)
    jumps +=1
  i += 1
  j +=1
  circles +=1

print(M)

#Multiple 2 matrices

M1 = [[2,3,4],[3,5,6],[4,5,3]]
M2 = [[1,2,1],[-1,2,1],[3,2,1]]

m,n,o = 3,3,3  # first is m*n , n*o

M = [[0,0,0],[0,0,0],[0,0,0]]


for i in range(m):
  for j in range(o):
    count =0
    sum =0
    while(count < len(M1[i])):
      sum += M1[i][count]*M2[count][j]
      count +=1
    M[i][j] = sum

print(M)

def findRow(mat):
  rows = len(mat)
  cols = len(mat[0])

  i,j,row = 0,cols-1,0
  while(j>=0 and i<rows):
    while(j>=0 and mat[i][j] ==1):
      j -=1
      row = i
    i +=1
  return row

mat = [[1, 1, 1, 1],
       [0, 1, 1, 1],
       [0, 1, 1, 1],
       [0, 0, 0, 0],
       [1, 1, 1, 1]
       ]

print(findRow(mat))