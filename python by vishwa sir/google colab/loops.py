# -*- coding: utf-8 -*-
"""Loops.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XnZFXU9Wc2pwcEZXuKvaOnwvj7DwBD9U

# Python Loops

Python loops are a way to repeat a block of code multiple times based on a condition. They allow you to automate repetitive tasks and save yourself from the boredom of typing the same code over and over again. With Python loops, you can iterate through lists, perform calculations, and even control the flow of your program.

Python Loops are essential for executing repetitive tasks with ease. They allow you to iterate over a sequence of elements, such as a list or a string, and perform a set of actions. Loops help you save a ton of time by automating tasks that would otherwise require repetitive coding. They are like your trustworthy, time-saving sidekicks; you just need to know how to use them effectively.

## Types of Loops

There are two types of loops in Python:
1. For Loops.
2. While Loops.

For Loops are used when you know the number of times you want to iterate, while While Loops are used when you want to repeat a block of code as long as a certain condition is met.

## For Loops.

In Python, a For Loop allows you to iterate over a sequence, such as a list, string, or range of numbers. It's like having a personal assistant who goes through each item in your sequence, one by one, without questioning it.

Syntax:

```
for item in sequence:
    # Code block to execute
```

## Example:

Imagine you have a shopping list of fruits, and you want to print each item on the list. With a For Loop, you can effortlessly go through the list, pick out each fruit, and display it.
"""

# Define a list of fruits

fruits = ["apple", "banana", "cherry", "date", "elderberry"]

# Initialization: The loop variable "fruit" is initialized with the first element of the array.
# In this case, it starts with "apple".

for fruit in fruits:
    # Iteration: The loop iterates through each element of the array, one at a time.

    # Execution: Inside the loop, we can perform actions on the current element, which is stored in the loop variable "fruit."

    print("I like " + fruit)

# Termination: The loop continues to iterate until it reaches the last element of the array ("elderberry").

# Once all elements have been processed, the loop terminates.

"""## How for loop work?

- Initialization: The loop starts by initializing a loop variable. This variable can be any valid variable name and is used to represent each item in the sequence. In each iteration, the loop variable takes on the value of the next item in the sequence.

- Iteration: The loop iterates over the sequence and executes the code block for each item in the sequence. The loop variable takes on the value of each item, one by one, as the loop progresses through the sequence.

- Execution: The code block within the loop is executed for each iteration. You can include any statements or operations within the code block that you want to perform for each item in the sequence.

- Termination: The loop continues iterating until it reaches the end of the sequence. Once all items in the sequence have been processed, the loop terminates, and the program proceeds to the next line of code after the loop.

## Iterating Through a String:

Strings also make great companions for For Loops. You can easily loop through each character in a string, giving you the power to manipulate and transform them as you wish.
"""

# Define a string
text = "Hello, World!"

# Initialization: The loop variable "char" is initialized with the first character of the string.
# In this case, it starts with "H".

for char in text:
    # Iteration: The loop iterates through each character of the string, one at a time.

    # Execution: Inside the loop, we can perform actions on the current character, which is stored in the loop variable "char."
    print("Current character:", char)

# Termination: The loop continues to iterate until it reaches the last character of the string ("!").
# Once all characters have been processed, the loop terminates.

"""## Using Range() in For Loop:

Range() is a clever little function that generates a sequence of numbers for you. You can then unleash the For Loop and iterate through these numbers. It's like having a personal number generator that obediently follows your commands. The possibilities are endless, from printing numbers to performing complex calculations.

"""

# Initialization: We use the range() function to create a range of numbers from 1 to 5 (inclusive).
# The loop variable "num" is initialized with the first value in the range, which is 1.
for num in range(1, 6):
    # Iteration: The loop iterates through each number in the range, one at a time.

    # Execution: Inside the loop, we can perform actions on the current number, which is stored in the loop variable "num."
    print("Current number:", num)

# Termination: The loop continues to iterate until it reaches the end of the range (5).
# Once all numbers in the range have been processed, the loop terminates.

"""## While Loops:

While loops, on the other hand, are great when we are unsure about the number of times we want to repeat a code block. They follow a slightly different syntax. We start with the keyword "while" and then specify a condition. The code block will continue executing as long as the condition is true.

"""

# Initialization: We initialize a variable "num" to start with the first value in the range, which is 1.
num = 1

# The loop continues as long as "num" is less than or equal to 5.
while num <= 5:
    # Iteration: The loop iterates as long as the condition (num <= 5) is true.

    # Execution: Inside the loop, we can perform actions on the current number, which is stored in the variable "num."
    print("Current number:", num)

    # Update the value of "num" for the next iteration.
    num += 1

# Termination: The loop terminates when the condition (num <= 5) becomes false.

"""### You can also use an if statement within a While Loop to add more spice to your code."""

# Initialization: We initialize a variable "num" to start with the value 1.
num = 1

# The loop continues as long as "num" is less than or equal to 5.
while num <= 5:
    # Iteration: The loop iterates as long as the condition (num <= 5) is true.

    # Execution: Inside the loop, we can perform actions on the current number, which is stored in the variable "num."

    # Check if the current number is even using an "if" condition.
    if num % 2 == 0:
        print(num, "is even.")
    else:
        print(num, "is odd.")

    # Update the value of "num" for the next iteration.
    num += 1

# Termination: The loop terminates when the condition (num <= 5) becomes false.

"""## Infinite Loop

An infinite loop is an iterative control structure that never terminates (or eventually terminates
with a system error). Infinite loops are generally the result of programming errors. For example,
if the condition of a while loop can never be false, an infinite loop will result when executed.
Such infinite loops can cause a program to “hang,” that is, to be unresponsive to the user. In such cases, the program must be terminated by the use of some special keyboard input (such as ctrl-C) to interrupt the execution.

## Nested Loops.

In Python, nested loops refer to the concept of having one loop inside another loop. This allows us to perform repetitive tasks in a more intricate and powerful manner. The syntax of nested loops involves indenting the inner loop within the outer loop.

```
for outer_variable in outer_sequence:
    # Outer loop statements

    for inner_variable in inner_sequence:
        # Inner loop statements

    # More outer loop statements (if needed)

# More code outside the outer loop

```
"""

# Two lists of numbers
list1 = [1, 2, 3]
list2 = [4, 5, 6]

# Nested loops to find and display pairs of elements
for num1 in list1:
    for num2 in list2:
        print(f"Pair: ({num1}, {num2})")

"""## Control Statements.

Loop control statements in Python allow you to control the flow and execution of loops based on specific conditions.

There are three main control statements:
1. break.
2. continue
3. pass.

These statements can be used in both while and for loops to alter the loop's behavior.

### Break Statement.

The break statement in Python is used to terminate the execution of the loop containing it. As soon as the loop encounters a break statement, it terminates and the execution jumps to the next statement outside the loop. It's like saying, **"Hey, I'm done with this loop, let's move on!"**
"""

# Finding the first even number in a list

numbers = [1, 3, 5, 6, 7, 8, 9]

for num in numbers:
    if num % 2 == 0:
        print(f"First even number found: {num}")
        break

"""## Continue Statement.

The continue statement in Python allows you to skip the rest of the code in the current iteration of a loop, without terminating the loop as the break statement does. It's like saying, "Hey, I'm not interested in running the rest of this code right now, let's move on to the next iteration."

This can be handy when you have certain conditions that you want to skip and continue with the next iteration. Let’s now look at one example where we can make the best of the continue statement.

"""

# Skipping odd numbers and printing even numbers in a list

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

for num in numbers:
    if num % 2 != 0:
        continue
    print(f"Even number found: {num}")

"""By using the continue statement, you can save yourself from writing complex if-else blocks to handle such scenarios. It's like a magic wand that lets you jump straight to the next iteration without any hassle.

So, the next time you find yourself in a loop and want to skip some code and move on, just remember the mighty continue statement!

## Pass Statement.

The pass statement in Python is a magical tool that does absolutely nothing. Yes, you heard it right - NOTHING! It's like having a command that just exists but serves no purpose. It's like a decoration piece in your code that makes it look complete without actually contributing anything meaningful.
"""

for i in range(5):
    pass  # Placeholder for future code

"""So, next time you come across a situation where you need to write some code but don't actually need to do anything, remember the pass statement."""